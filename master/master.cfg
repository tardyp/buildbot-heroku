# -*- python -*-
# ex: set syntax=python:

import os
numbuilders = 5
# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 19989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = []
###c['change_source'].append(GitPoller(
#    'git://github.com/buildbot/pyflakes.git',
#    workdir='gitpoller-workdir', branch='master',
#    pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
builderNames = ["runtests"+str(i) for i in xrange(numbuilders)]

c['schedulers'].append(SingleBranchScheduler(
    name="all",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=builderNames))
c['schedulers'].append(ForceScheduler(
    name="defaultforce",
    builderNames=builderNames))
from demo1 import demo1
c['schedulers'].append(demo1)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import ShellCommand


def createFactory(i):
    factory = BuildFactory()
    # check out the source
    #factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
    # run the tests (note that this will require that 'trial' is installed)
    #factory.addStep(ShellCommand(command=["trial", "pyflakes"]))
    for j in xrange(2):
        factory.addStep(ShellCommand(command="echo tic tac; sleep 1;"))

    schedulerNames = ['runtests' + str(j) for j in xrange(i + 1, numbuilders)]
    if schedulerNames:
        factory.addStep(Trigger(schedulerNames=schedulerNames, waitForFinish=True))
    factory.addStep(ShellCommand(command="for i in `seq 4` ; do echo tic tac $i; sleep 1; done"))
    return factory

from buildbot.config import BuilderConfig

c['builders'] = []
for i in xrange(numbuilders):
    c['builders'].append(
        BuilderConfig(
            name="runtests"+str(i),
            slavenames=["example-slave"],
            factory=createFactory(i)))
    c['schedulers'].append(
        Triggerable(
            name="runtests"+str(i),
            builderNames=['runtests'+str(i)]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Buildbot nine demo"
c['titleURL'] = "http://buildbot.net"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

PORT = int(os.environ.get('PORT', 8020))
c['buildbotURL'] = os.environ.get('buildbotURL', "http://localhost:%d/" % (PORT, ))

# minimalistic config to activate new web UI
c['www'] = dict(port=PORT, allowed_origins=["*"],
                url=c['buildbotURL'],
                plugins=dict(codeparameter={'env': str(os.environ)}))
c['mq'] = dict(debug=False)

####### DB URL

# This specifies what database buildbot uses to store its state.  You can leave
# this at its default for all but the largest installations.
DBURL = os.environ.get('DBURL', "sqlite:///state.sqlite")

c['db'] = {'db_url': DBURL}
